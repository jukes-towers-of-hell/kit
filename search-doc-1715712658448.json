[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/kit/docs/intro","content":"Getting Started","keywords":""},{"title":"Buttons","type":0,"sectionRef":"#","url":"/kit/docs/clientobjects/Buttons","content":"","keywords":""},{"title":" ButtonConfigurations ​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-buttonconfigurations-","content":" "},{"title":" ButtonPressOffset​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-buttonpressoffset","content":"Determines the offset (in studs) that the ButtonPart moves when pressed. This offset is relative to the ButtonPart's orientation. A number type will offset the ButtonPart on the negative Y axis.A Vector3 and CFrame type will offset the ButtonPart move on all axes (with CFrame also supporting an orientation offset). Default value: 0.75 Types: numberVector3CFrame  "},{"title":" PressedMaterial​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-pressedmaterial","content":"The material of the button when pressed. Default value: Neon Types: EnumItemstring  "},{"title":" Timer​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-timer","content":"How many seconds the button will stay pressed. Only works if the value is above 0. Default value: 0 Types: number  "},{"title":" DecimalPlaces​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-decimalplaces","content":"The number of decimal places shown on the button's timer (if enabled). Default value: 0 Types: number  "},{"title":" TimerText​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-timertext","content":"Overwrites the button timer with custom text. Any backticks (`) are replaced with the button timer. Types: string  "},{"title":" HideGUI​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-hidegui","content":"Hides the button timer (both on-screen and on the ButtonPart). Default value: false Types: boolean  "},{"title":" ButtonActivatedPlatform ​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-buttonactivatedplatform-","content":" "},{"title":" SetTransparency​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-settransparency","content":"The button platform's transparency when activated. Can also be added to descendants of button platforms (which have their transparency changed by buttons). Default value: 0 Types: number  "},{"title":" FullHide​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-fullhide","content":"Makes button platform transparency 1 instead of 0.6 when not activated. Does not affect its descendants. Can also be added to descendants of button platforms (which have their transparency changed by buttons). Types: tag  "},{"title":" Invert​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-invert","content":"Inverts a button platform's state, making it active by default. Also affects all of its descendants (which are altered by buttons). Types: tag  "},{"title":" ColorOverride​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-coloroverride","content":"Overrides the color of the button platform, making it affected by buttons of the configuration's color instead of the platform's color. Types: Color3  "},{"title":" IgnoreCanCollide​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-ignorecancollide","content":"Makes a button platform's state not affect its collision. Types: tag  "},{"title":" IgnoreTransparency​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-ignoretransparency","content":"Makes a button platform's state not affect its transparency. Does not affect the platform's descendants. Types: tag  "},{"title":" IgnoreAll​","type":1,"pageTitle":"Buttons","url":"/kit/docs/clientobjects/Buttons#-ignoreall","content":"A combination of IgnoreCanCollide and IgnoreTransparency. Types: tag  help x3 "},{"title":"utility","type":0,"sectionRef":"#","url":"/kit/api/utility","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"utility","url":"/kit/api/utility#properties","content":" "},{"title":"tableUtil​","type":1,"pageTitle":"utility","url":"/kit/api/utility#tableUtil","content":"&lt;/&gt; utility.tableUtil: table This is the TableUtil module that provides a lot of nice functions for working with tables. Read more here: https://sleitnick.github.io/RbxUtil/api/TableUtil "},{"title":"Functions​","type":1,"pageTitle":"utility","url":"/kit/api/utility#functions","content":" "},{"title":"checkConfig​","type":1,"pageTitle":"utility","url":"/kit/api/utility#checkConfig","content":"&lt;/&gt; utility.checkConfig( instance: Instance , configName: string ) → any This function is used to check for a specific ValueBase or Attribute in an Instance, based on the given configName. If a ValueBase is found, it will return the ValueBase's value. If an Attribute is found, it will return the Attribute's value. If no ValueBase or Attribute is found, it will return nil.  "},{"title":"getConfigChangedSignal​","type":1,"pageTitle":"utility","url":"/kit/api/utility#getConfigChangedSignal","content":"&lt;/&gt; utility.getConfigChangedSignal( instance: Instance , configName: string ) → RBXScriptSignal?  This function is used to check for a specific ValueBase or Attribute in an Instance, then give it's ChangedSignal, based on the given configName. If a ValueBase is found, it will return the ValueBase's ChangedSignal. If an Attribute is found, it will return the Attribute's ChangedSignal. If no ValueBase or Attribute is found, it will return nil.  "},{"title":"hasTag​","type":1,"pageTitle":"utility","url":"/kit/api/utility#hasTag","content":"shorthand &lt;/&gt; utility.hasTag( instance: Instance , tagName: string ) → boolean This function is used to check if an Instance has a tag with the provided tagName or if it has a ValueBase/Attribute with that tagName. It does so by first checking if the Instance has the tag directly, and if not, it checks if there is a ValueBase or Attribute with the given tagName.  "},{"title":"isButtonActivatedPlatform​","type":1,"pageTitle":"utility","url":"/kit/api/utility#isButtonActivatedPlatform","content":"shorthand &lt;/&gt; utility.isButtonActivatedPlatform(platform: Instance ) → boolean This function is used to check if the provided Instance is a ButtonActivatedPlatform. It does so by first checking if the Instance is a BasePart, then checking if the platform's name is ButtonActivatedPlatform or has the ButtonActivated tag.  "},{"title":"isBalloon​","type":1,"pageTitle":"utility","url":"/kit/api/utility#isBalloon","content":"shorthand &lt;/&gt; utility.isBalloon( parent: Instance , doNotCheckAncestor: boolean? ) → boolean This function is used to check if the provided Instance is a Balloon (or is within a Balloon). It does so by checking if the name of the Instance is Balloon, and if not, it will instead check for the Instance's ancestors to see if it is within a Balloon. (You can disable this ancestor check by setting doNotCheckAncestor to true.)  "},{"title":"isTurret​","type":1,"pageTitle":"utility","url":"/kit/api/utility#isTurret","content":"shorthand &lt;/&gt; utility.isTurret( parent: Instance , doNotCheckAncestor: boolean? ) → boolean This function is used to check if the provided Instance is a Turret (or is within a Turret). It does so by checking if the name of the Instance is Bullet, and if not, it will instead check for the Instance's ancestors to see if it is within a Bullet. (You can disable this ancestor check by setting doNotCheckAncestor to true.)  "},{"title":"isPushbox​","type":1,"pageTitle":"utility","url":"/kit/api/utility#isPushbox","content":"shorthand &lt;/&gt; utility.isPushbox( parent: Instance , doNotCheckAncestor: boolean? ) → boolean This function is used to check if the provided Instance is a Pushbox (or is within a Pushbox). It does so by checking if the name of the Instance is Pushbox, and if not, it will instead check for the Instance's ancestors to see if it is within a Pushbox. (You can disable this ancestor check by setting doNotCheckAncestor to true.)  "},{"title":"isSequence​","type":1,"pageTitle":"utility","url":"/kit/api/utility#isSequence","content":"shorthand &lt;/&gt; utility.isSequence(parent: Instance ) → boolean This function is used to check if the provided Instance is within a Sequencer sequence. It does so by checking the Instance's ancestors to see if it is within a Sequencer.  "},{"title":"evaluateToucher​","type":1,"pageTitle":"utility","url":"/kit/api/utility#evaluateToucher","content":"&lt;/&gt; utility.evaluateToucher( part: BasePart , toucher: BasePart , config: Instance? , checkConfig: typeof(defaultChecks)? ) → boolean This function is used to validate the touching part. It does so by doing the following checks: checking if the &quot;SupportPlayers&quot; configuration is toggled, and if the toucher is the local player's character. checking if the &quot;SupportPushboxes&quot; configuration is toggled, and if the toucher is a pushbox by using the util.isPushbox function, and if the ColorSpecific configuration is toggled and the pushbox is the same color as the part. checking if the &quot;SupportBalloons&quot; configuration is toggled, and if the toucher is a balloon by using the util.isBalloon function, and if the ColorSpecific configuration is toggled and the balloon is the same color as the part. checking if the &quot;SupportTurrets&quot; configuration is toggled, and if the toucher is a turret bullet by using the util.isTurret function, and if the ColorSpecific configuration is toggled and the turret bullet is the same color as the part. -- we're using troves here for garbage collection purposes scope.trove:Add(part.Touched:Connect(function(toucher: BasePart) if not scope.utility.evaluateToucher(part, toucher, part) then return end -- run code! end)) You can also disable certain checks by passing in a table, shown here: local allowedChecks = { allowPlayer = true, allowPushbox = true, allowColorSpecific = false, allowBalloons = false, allowTurrets = false, } if not scope.utility.evaluateToucher(part, toucher, part, allowedChecks) then return end   "},{"title":"roundColor​","type":1,"pageTitle":"utility","url":"/kit/api/utility#roundColor","content":"shorthand &lt;/&gt; utility.roundColor(color: Color3 ) → Color3  Rounds the components of a Color3 to prevent any potential floating point issues. Mainly used by Buttons.  "},{"title":"subtractHSV​","type":1,"pageTitle":"utility","url":"/kit/api/utility#subtractHSV","content":"shorthand &lt;/&gt; utility.subtractHSV( color: Color3 , subtract: number?-- default: 0.5 ) → Color3  Subtracts the value of a Color3 by the given subtract number. Useful for text stroke colors.  "},{"title":"getInstanceProperty​","type":1,"pageTitle":"utility","url":"/kit/api/utility#getInstanceProperty","content":"shorthand &lt;/&gt; utility.getInstanceProperty( instance: any, property: string ) → ( any, boolean ) Safely gets a property of an instance. Will return nil if the property does not exist, or if any errors occur.  "},{"title":"setInstanceProperty​","type":1,"pageTitle":"utility","url":"/kit/api/utility#setInstanceProperty","content":"shorthand &lt;/&gt; utility.setInstanceProperty( instance: any, property: string, value: any ) → boolean Safely sets a property of an instance.  "},{"title":"assureValueType​","type":1,"pageTitle":"utility","url":"/kit/api/utility#assureValueType","content":"shorthand &lt;/&gt; utility.assureValueType( value: unknown, default: defaultType ) → defaultType Checks if value and default are of the same type. If not, it will return the default value.  "},{"title":"getConfig​","type":1,"pageTitle":"utility","url":"/kit/api/utility#getConfig","content":"shorthand &lt;/&gt; utility.getConfig( instance: Instance , configName: string, default: defaultType ) → defaultType Shorthand for utility.assureValueType(utility.checkConfig(instance, configName), default)  "},{"title":"applyPartOptimizations​","type":1,"pageTitle":"utility","url":"/kit/api/utility#applyPartOptimizations","content":"shorthand &lt;/&gt; utility.applyPartOptimizations(part: Instance? ) → () Shorthand function to set properties for BaseParts that aren't gonna be used to boost performance a little, I don't want to rewrite this every single time I want to use it. Mainly used in the Sequencers. This will apply the following properties: Transparency 0 CanTouch false CanCollide false CanQuery false IgnoreAll Tag  "},{"title":"generateUID​","type":1,"pageTitle":"utility","url":"/kit/api/utility#generateUID","content":"shorthand &lt;/&gt; utility.generateUID( curlyBraces: boolean?, removeSplit: boolean? ) → string Shorthand for HttpService:GenerateGUID(). scope.utility.generateUID(false, true) --&gt; 4BA80F4637244B4BBA957E28B9443DE9   "},{"title":"getEnumFromString​","type":1,"pageTitle":"utility","url":"/kit/api/utility#getEnumFromString","content":"shorthand &lt;/&gt; utility.getEnumFromString( str: string | EnumItem , default: EnumItem ) → any   "},{"title":"onFlipped​","type":1,"pageTitle":"utility","url":"/kit/api/utility#onFlipped","content":"&lt;/&gt; utility.onFlipped( part: BasePart , callback: () → ()-- The given function that will run once the player flips. ) → () → ()-- Cleanup function; add this to your Trove! This function allows you to bind a callback function once the player flips using the given part. if scope.utility.hasTag(part, &quot;CanFlip&quot;) then -- check if the player can even flip -- we're using troves here for garbage collection purposes scope.trove:Add(scope.utility.onFlipped(part, function() -- run code here! end)) end   "},{"title":"playSoundFromPart​","type":1,"pageTitle":"utility","url":"/kit/api/utility#playSoundFromPart","content":"&lt;/&gt; utility.playSoundFromPart( sound: string | Sound , parent: Instance? ,-- Where the sound will play, can be any instance. Default will be script (which will play the sound globally). searchFrom: Instance? -- Where to look for the sound object if the the given sound is a string. ) → () Plays the given sound at the given parent. Automatically cleans up after the sound has finished.  "},{"title":"tween​","type":1,"pageTitle":"utility","url":"/kit/api/utility#tween","content":"&lt;/&gt; utility.tween( instance: Instance , time: number, goal: {[string]: any}, easingStyle: Enum.EasingStyle?,-- EasingStyle easingDirection: Enum.EasingDirection?,-- EasingDirection ...: any ) → Tween  Simple tween function that handles garbage collection properly. scope.utility.tween(part, 0.5, { Color = Color3.fromRGB(255, 0, 0) })   "},{"title":"WaitForDescendant​","type":1,"pageTitle":"utility","url":"/kit/api/utility#WaitForDescendant","content":"shorthand &lt;/&gt; utility.WaitForDescendant( instance: Instance , descendantName: string,-- the descendant to look for timeout: number? ) → Instance?  Waits until the provided descendantName is found within the provided instance. Shorthand of instance:FindFirstChild(descendantName, true) "}]